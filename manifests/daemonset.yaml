apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: rdc-metrics-exporter
  namespace: rdc
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics-exporter
      daemonset-name: rdc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics-exporter
        daemonset-name: rdc
    spec:
      containers:
      - name: rdc
        image: ctiml/rdc-metrics-exporter:v0.0.1
        command: ["/opt/rocm/bin/rdcd"]
        args: ["-u"]
        readinessProbe:
          tcpSocket:
            port: 50051
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 50051
          initialDelaySeconds: 15
          periodSeconds: 20
        securityContext:
          privileged: true
        ports:
        - containerPort: 50051
          name: rdc
          protocol: TCP
      - name: rdc-prom
        image: ctiml/rdc-metrics-exporter:v0.0.1
        command: ["/bin/sh", "-c"]
        args:
          - |
            trap : TERM INT
      
            echo "Generating GPU device map..."
            mkdir -p /data
            python3 /opt/rocm/libexec/rocm_smi/gen_device_map.py
      
            echo "Waiting for RDCD to be ready on localhost:50051..."
            until nc -z localhost 50051; do
              sleep 1
            done
            echo "RDCD is ready!"
      
            python3 -u /opt/rocm/libexec/rdc/python_binding/rdc_prometheus.py \
              --rdc_unauth \
              --enable_kubernetes_integration \
              2>&1 & wait
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: PREFIX
          value: amd_
        readinessProbe:
          httpGet:
            path: /metrics
            port: exporter-port
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /metrics
            port: exporter-port
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
        securityContext:
          privileged: true
        ports:
        - containerPort: 5000
          name: exporter-port
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/kubelet/pod-resources
          name: pod-resources
        workingDir: /root
      initContainers:
      - command:
        - sh
        - -c
        - if [ "$SIM_ENABLE" = "true" ]; then exit 0; fi; while [ ! -d /host-sys/class/kfd
          ] || [ ! -d /host-sys/module/amdgpu/drivers/ ]; do echo "amdgpu driver is
          not loaded "; sleep 2 ;done
        env:
        - name: SIM_ENABLE
          value: "false"
        image: busybox:1.36
        name: driver-init
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host-sys
          name: sys-volume
      nodeSelector:
        feature.node.kubernetes.io/amd-gpu: "true"
      volumes:
      - hostPath:
          path: /sys
          type: Directory
        name: sys-volume
      - hostPath:
          path: /var/lib/kubelet/pod-resources
          type: Directory
        name: pod-resources
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
